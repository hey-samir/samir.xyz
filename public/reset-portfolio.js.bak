/**
 * Version v7.2.0 - Complete Page Layout Reset Script - Perfect Reference Match with Refined UI
 * 
 * This specialized script creates an exact match to the reference image including page layout.
 * Features: black background, clean stats layout, purple/gray category buttons, white cards.
 * Updated: 2025-03-30
 * 
 * - Creates exact 2-per-row grid layout with improved spacing between cards (1.5rem)
 * - Applies proper page styling with black background and left-aligned heading
 * - Formats stats as a consistent 2-row, 4-column grid across all viewport sizes
 * - Creates purple highlight for selected category buttons without rounded corners
 * - Sets precise badge positioning with improved padding in purple/#7e22ce
 * - Ensures logos are properly sized and centered in white cards with consistent dimensions
 * - Safely handles DOM manipulations to prevent removal errors
 * - Adds proper spacing between stats section and filters section
 */

(function() {
  console.log('Portfolio reset script v7.2.0 with refined UI styling and responsive design loaded');
  
  // Version timestamp to ensure we're running the latest script (cache busting)
  const VERSION = 'v7.2.0-' + Date.now();
  console.log('Script version timestamp:', VERSION);
  
  // Safe DOM manipulation helper with additional checks
  function safeRemoveElement(element) {
    try {
      // First verify the element exists and is connected to DOM
      if (!element || !element.isConnected) {
        console.log('Element is null, undefined, or not in DOM');
        return false;
      }
      
      // Then verify it has a parent
      if (!element.parentNode) {
        console.log('Element has no parent node');
        return false;
      }
      
      // Finally verify the parent contains this element
      if (!element.parentNode.contains(element)) {
        console.log('Parent does not contain this element');
        return false;
      }
      
      // Now it's safe to remove
      element.parentNode.removeChild(element);
      return true;
    } catch (e) {
      console.log('Safe remove failed:', e);
      // As a fallback, just hide the element if we can't remove it
      try {
        if (element) {
          element.style.display = 'none';
          console.log('Element hidden as fallback');
        }
      } catch (innerError) {
        console.error('Even hiding failed:', innerError);
      }
    }
    return false;
  }
  
  // Force clear CSS caches by adding a dynamic stylesheet
  function forceClearStyleCache() {
    // First, try to remove any existing dynamic styles
    const oldStyles = document.querySelectorAll('style[data-portfolio-reset]');
    oldStyles.forEach(oldStyle => {
      safeRemoveElement(oldStyle);
    });
    
    // Create and add new style
    try {
      const style = document.createElement('style');
      style.setAttribute('data-portfolio-reset', VERSION);
      style.textContent = `
        /* Force-refresh cache buster: ${VERSION} */
        /* EXACT REFERENCE MATCHING DESIGN - v7.2.0 */
        
        /* Page background */
        body {
          background-color: #000000 !important;
        }
        
        /* Overall page container styling */
        .bg-black, div[class*="bg-gray-900"] {
          background-color: #000000 !important;
        }
        
        /* Left-aligned heading */
        h1.text-4xl {
          text-align: left !important;
          margin-bottom: 1rem !important;
        }
        
        /* Enhanced stats section - ALWAYS 2 rows of 4 columns */
        .stats-row-1, .stats-row-2 {
          margin-bottom: 0.75rem !important;
          display: grid !important;
          grid-template-columns: repeat(4, 1fr) !important; /* Always 4 columns */
          width: 100% !important;
          max-width: 800px !important;
          gap: 0.5rem !important;
        }
        
        /* Force grid layout for all viewport sizes */
        @media (max-width: 768px) {
          .stats-row-1, .stats-row-2 {
            grid-template-columns: repeat(4, 1fr) !important;
            font-size: 90% !important; /* Scale down text size on smaller screens */
          }
        }
        
        /* Stats item styling */
        .stats-item {
          background: none !important;
          border: none !important;
          box-shadow: none !important;
          padding: 0 !important;
          min-width: 0 !important; /* Allow text truncation */
          overflow: hidden !important;
          text-overflow: ellipsis !important;
        }
        
        /* Stats labels */
        .stats-item div:first-child {
          color: #9ca3af !important; /* gray-400 */
          font-size: 0.875rem !important;
          white-space: nowrap !important;
          overflow: hidden !important;
          text-overflow: ellipsis !important;
        }
        
        /* Stats values */
        .stats-item div:last-child {
          color: #ffffff !important;
          font-size: 1.25rem !important;
          font-weight: 700 !important;
          white-space: nowrap !important;
          overflow: hidden !important;
          text-overflow: ellipsis !important;
        }
        
        /* Add spacing between stats and filters */
        .stats-row-2 {
          margin-bottom: 2.5rem !important;
        }
        
        /* For very small screens, handle gracefully */
        @media (max-width: 480px) {
          .stats-row-1, .stats-row-2 {
            font-size: 75% !important; /* Scale down more */
          }
          
          .stats-item div:last-child {
            font-size: 1rem !important;
          }
        }
        
        /* Category buttons - selected button in purple, otherwise gray (exact match to reference) */
        button[class*="text-sm"] {
          min-width: 70px !important;
          padding: 0.375rem 1rem !important; /* py-1.5 px-4 */
          font-size: 0.875rem !important; /* text-sm */
          border-radius: 0 !important; /* no rounded corners */
          font-weight: 500 !important;
          margin-right: 0.5rem !important;
          margin-bottom: 0.5rem !important;
          outline: none !important;
          border: none !important;
          box-shadow: none !important;
        }
        
        /* Selected category button is purple */
        button[class*="bg-purple-700"] {
          background-color: #7e22ce !important; /* purple-700 */
          color: #ffffff !important;
        }
        
        /* Non-selected category buttons are gray */
        button[class*="text-sm"]:not([class*="bg-purple-700"]) {
          background-color: #1f2937 !important; /* gray-800 */
          color: #ffffff !important;
          transition: background-color 0.2s !important;
        }
        
        /* Hover effect on non-selected buttons */
        button[class*="text-sm"]:not([class*="bg-purple-700"]):hover {
          background-color: #374151 !important; /* gray-700 */
        }
        
        /* Grid layout - responsive with 2 cards per row on desktop */
        .portfolio-grid { 
          display: grid !important;
          grid-template-columns: repeat(2, 1fr) !important; /* 2 columns by default */
          grid-auto-rows: 150px !important;
          gap: 0.375rem !important; /* Extremely narrow spacing */
          row-gap: 0.375rem !important; /* Very narrow vertical spacing */
          column-gap: 0.5rem !important; /* Narrow horizontal spacing */
          width: 95% !important; /* Wider to fill more space */
          max-width: 800px !important; /* Limited max width */
          margin: 0 auto !important;
          padding: 0 !important;
        }
        
        /* Responsive grid adjustments */
        @media (max-width: 768px) {
          .portfolio-grid {
            grid-template-columns: repeat(2, 1fr) !important; /* 2 columns on tablet */
            width: 95% !important; /* Slightly wider on tablet */
            gap: 0.375rem !important; /* Extremely narrow gap on tablet */
            row-gap: 0.375rem !important; /* Very narrow vertical spacing */
            column-gap: 0.5rem !important; /* Narrow horizontal spacing */
          }
        }
        
        @media (max-width: 640px) {
          .portfolio-grid {
            grid-template-columns: 1fr !important; /* Single column on mobile */
            width: 95% !important; /* Slightly wider on small screens */
            gap: 0.375rem !important; /* Extremely narrow gap on mobile */
          }
        }
        
        /* Pure white cards with minimal styling - exactly like reference */
        .portfolio-grid > div > div {
          height: 150px !important;
          border-radius: 0.75rem !important;
          background-color: white !important;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05) !important;
          overflow: hidden !important;
          border: none !important;
          transition: none !important;
          padding: 0 !important;
          margin: 0 !important;
        }
        
        /* Card content centered - exactly like reference */
        .portfolio-grid > div > div > a {
          display: flex !important;
          height: 100% !important;
          width: 100% !important;
          align-items: center !important;
          justify-content: center !important;
          padding: 0 !important;
          margin: 0 !important;
          position: relative !important;
        }
        
        /* Purple badge styling - exact match to reference image */
        .badge-markup, [data-status="Markup"] { 
          position: absolute !important;
          top: 8px !important; /* top-2 */
          right: 8px !important; /* right-2 */
          z-index: 20 !important;
          background-color: #7e22ce !important; /* purple-700 */
          color: white !important;
          font-size: 0.7rem !important;
          font-weight: 500 !important;
          border-radius: 0.25rem !important;
          padding: 0.15rem 0.5rem !important;
          line-height: 1.4 !important;
          box-shadow: none !important;
        }
        
        /* Gray badge for Acquired - exact match to reference styling */
        .badge-acquired, [data-status="Acquired"] { 
          position: absolute !important;
          top: 8px !important; /* top-2 */
          right: 8px !important; /* right-2 */
          z-index: 20 !important;
          background-color: #6b7280 !important; /* gray-500 */
          color: white !important;
          font-size: 0.7rem !important;
          font-weight: 500 !important;
          border-radius: 0.25rem !important;
          padding: 0.15rem 0.5rem !important;
          line-height: 1.4 !important;
          box-shadow: none !important;
        }
        
        /* Image styling - exactly like reference */
        .portfolio-grid img {
          max-height: 100px !important; /* Much larger logo height */
          max-width: 140px !important; /* Wider logo width */
          object-fit: contain !important;
          display: block !important;
          margin: 0 auto !important;
          filter: none !important;
          transition: none !important;
        }
        
        /* Remove any hover effects */
        .portfolio-grid > div > div:hover {
          transform: none !important;
          box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05) !important;
        }
        
        /* Hide all hover overlays */
        .portfolio-grid div[class*="absolute inset-0"] {
          display: none !important;
        }
      `;
      document.head.appendChild(style);
      console.log('Dynamic style with cache busting injected - version: ' + VERSION);
    } catch (e) {
      console.error('Error applying styles:', e);
    }
  }
  
  // Run immediately - this is critical to prevent the flicker effect
  forceClearStyleCache();
  
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - preparing portfolio grid with gray theming');
    // Run immediately without delays to prevent flicker
    resetPortfolioGridGently();
    enhanceLogoDisplayPreservingStyles();
    enforceStatsLayout();
    preserveAnimationsAndHoverEffects();
    
    // Also run with a slight delay as backup
    setTimeout(resetPortfolioGridGently, 50);
    setTimeout(enhanceLogoDisplayPreservingStyles, 100);
    setTimeout(enforceStatsLayout, 150);
    setTimeout(preserveAnimationsAndHoverEffects, 200);
  });

  // Also run on window load to ensure images are loaded
  window.addEventListener('load', function() {
    console.log('Window loaded - ensuring portfolio grid with gray theming is applied');
    resetPortfolioGridGently();
    enhanceLogoDisplayPreservingStyles();
    enforceStatsLayout(); // Apply stats layout immediately
    preserveAnimationsAndHoverEffects();
    
    // Run twice more with delays to ensure everything is properly applied
    setTimeout(() => {
      resetPortfolioGridGently();
      enhanceLogoDisplayPreservingStyles();
      enforceStatsLayout(); // Apply stats layout again
      preserveAnimationsAndHoverEffects();
      console.log('Portfolio grid final styling check complete');
    }, 1000);
  });
  
  // Add comprehensive resize handler for both stats and portfolio grid
  window.addEventListener('resize', function() {
    // Prioritize stats layout first on resize
    setTimeout(enforceStatsLayout, 50);
    // Then adjust the portfolio grid for the new viewport
    setTimeout(resetPortfolioGridGently, 100);
    // Finally, ensure images and badges are properly sized
    setTimeout(enhanceLogoDisplayPreservingStyles, 150);
  });

  function resetPortfolioGridGently() {
    const portfolioGrid = document.querySelector('.portfolio-grid');
    
    if (!portfolioGrid) {
      console.log('Portfolio grid not found - will try again later');
      return;
    }

    // Always apply responsive layout on every call, not just the first time
    // This ensures the layout stays responsive when the window is resized
    {
      console.log('Applying gentle grid reset');
      
      // Use a temporary class instead of directly manipulating display style
      portfolioGrid.classList.add('grid-temp-reflow');
      void portfolioGrid.offsetHeight; // This triggers a reflow
      portfolioGrid.classList.remove('grid-temp-reflow');
      
      // Mark as gently reset
      portfolioGrid.classList.add('gentle-reset-applied');
      portfolioGrid.classList.add('grid-reset');
      
      // Always force responsive behavior regardless of previous styles
      portfolioGrid.classList.remove('grid-cols-2', 'grid-cols-1', 'grid-cols-3');
      
      // Set responsive grid styles with extremely tight spacing
      const viewport = window.innerWidth;
      
      // Force extremely tight spacing on all screens no matter what!
      portfolioGrid.setAttribute('data-forced-tight-spacing', 'true');
      portfolioGrid.style.gridGap = '0.375rem'; // Force tight spacing
      portfolioGrid.style.gap = '0.375rem'; // Force tight spacing
      portfolioGrid.style.rowGap = '0.375rem'; // Force tight spacing
      portfolioGrid.style.columnGap = '0.375rem'; // Force tight spacing
      
      if (viewport <= 640) {
        // Mobile view - single column
        portfolioGrid.style.gridTemplateColumns = '1fr';
        portfolioGrid.style.gridAutoRows = '150px';
        portfolioGrid.style.width = '95%';
        portfolioGrid.style.maxWidth = '500px';
        portfolioGrid.style.margin = '0 auto';
      } else if (viewport <= 768) {
        // Tablet view - 2 columns with extremely tight gap
        portfolioGrid.style.gridTemplateColumns = 'repeat(2, 1fr)';
        portfolioGrid.style.gridAutoRows = '150px';
        portfolioGrid.style.width = '95%';
        portfolioGrid.style.maxWidth = '700px';
        portfolioGrid.style.margin = '0 auto';
      } else {
        // Desktop view - 2 columns with extremely tight gap
        portfolioGrid.style.gridTemplateColumns = 'repeat(2, 1fr)';
        portfolioGrid.style.gridAutoRows = '150px';
        portfolioGrid.style.width = '95%';
        portfolioGrid.style.maxWidth = '800px';
        portfolioGrid.style.margin = '0 auto';
      }
      
      // Additional force to ensure spacing is applied
      portfolioGrid.querySelectorAll('div').forEach(div => {
        div.style.margin = '0'; // Remove any margins that might interfere
      });
    }
    
    // Preserve visibility of cards without changing other custom styles
    const cards = portfolioGrid.querySelectorAll('.portfolio-grid > div');
    cards.forEach(card => {
      // Only fix opacity for invisible cards
      const computedStyle = window.getComputedStyle(card);
      if (parseFloat(computedStyle.opacity) < 0.5) {
        card.style.opacity = '1';
      }
      
      // No other style changes to preserve gray styling
    });
    
    console.log('Portfolio grid has been gently reset while preserving custom gray styling');
  }

  function enhanceLogoDisplayPreservingStyles() {
    // Find all company logo images that need enhancement
    const companyLogos = document.querySelectorAll('.portfolio-grid img:not(.styled-v4)');
    
    if (companyLogos.length === 0) {
      // If all logos are already enhanced, we can skip
      return;
    }
    
    console.log(`Enhancing ${companyLogos.length} logo images while preserving styles`);
    
    companyLogos.forEach(img => {
      // Mark this image as styled with our new version marker
      img.classList.add('styled-v4');
      
      // Apply forceful logo sizing - the important part!
      try {
        // Always apply these styles to ensure consistency
        img.setAttribute('data-sized-by-portfolio-script', 'true');
        img.style.maxHeight = '100px'; // Much larger height
        img.style.height = 'auto'; // Let height adjust to width
        img.style.maxWidth = '140px'; // Wider width  
        img.style.width = 'auto'; // Let width adjust to height
        img.style.objectFit = 'contain';
        img.style.display = 'block';
        img.style.margin = '0 auto';
        img.style.padding = '0px';
        img.style.filter = 'none';
        
        // Ensure image is properly centered in the card
        const parentLink = img.closest('a');
        if (parentLink) {
          parentLink.style.display = 'flex';
          parentLink.style.alignItems = 'center';
          parentLink.style.justifyContent = 'center';
          parentLink.style.height = '100%';
          parentLink.style.width = '100%';
          parentLink.style.padding = '0';
        }
      } catch (e) {
        console.error('Error setting image styles:', e);
      }
      
      // Add error handling directly to images
      if (!img.hasAttribute('data-error-handled')) {
        img.setAttribute('data-error-handled', 'true');
        
        img.onerror = function() {
          console.log(`Handling error for image: ${img.alt || 'unnamed'}`);
          
          // Only handle white background for image container if needed
          const imgContainer = img.closest('div');
          if (imgContainer && !img.complete) {
            // Check if the container already has a white background from CSS
            const containerStyle = window.getComputedStyle(imgContainer);
            
            if (containerStyle.backgroundColor === 'rgba(0, 0, 0, 0)' || 
                containerStyle.backgroundColor === 'transparent') {
              // Apply background only if not already set
              imgContainer.style.backgroundColor = 'white';
              imgContainer.style.padding = '4px';
              imgContainer.style.borderRadius = '4px';
            }
          }
          
          // Just hide the image on error instead of trying to replace it
          // This avoids DOM manipulation errors with React's virtual DOM
          if (!img.complete || img.naturalWidth === 0) {
            try {
              // Simply hide the image and show nothing
              img.style.display = 'none';
              
              // Add empty alt text to improve accessibility
              img.alt = '';
              
              // Add a data attribute to mark this image as handled
              img.setAttribute('data-error-handled-safely', 'true');
              
              console.log('Image hidden safely without DOM manipulation');
            } catch (e) {
              console.error('Error hiding failed image:', e);
            }
          }
        };
      }
    });
    
    console.log('Logo display has been enhanced while preserving custom gray styling');
  }
  
  function preserveAnimationsAndHoverEffects() {
    // Find all card elements that need hover effect preservation
    const cards = document.querySelectorAll('.portfolio-grid > div > div:not(.hover-preserved)');
    
    if (cards.length === 0) {
      return;
    }
    
    console.log(`Preserving hover effects and animations for ${cards.length} cards`);
    
    cards.forEach(card => {
      // Mark this card as processed
      card.classList.add('hover-preserved');
      
      // Ensure consistent padding - remove padding to let images fill more space
      const cardLink = card.querySelector('a');
      if (cardLink && !cardLink.hasAttribute('data-padding-fixed')) {
        cardLink.style.padding = '0'; // Remove padding completely to give more space
        cardLink.style.display = 'flex';
        cardLink.style.alignItems = 'center';
        cardLink.style.justifyContent = 'center';
        cardLink.style.height = '100%';
        cardLink.style.width = '100%';
        cardLink.setAttribute('data-padding-fixed', 'true');
      }
      
      // Find and style status badges
      const badge = card.querySelector('.absolute.top-2.right-2');
      if (badge) {
        badge.classList.add('z-20', 'text-xs', 'px-2.5', 'py-0.5', 'rounded-md', 'text-white', 'bg-gray-800', 'font-semibold', 'shadow-md', 'shadow-gray-900/30', 'animate-fade-in');
        // Remove any purple styling
        badge.classList.remove('bg-purple-700', 'shadow-purple-900/30');
      }
      
      // Find hover overlay elements
      const overlay = card.querySelector('div[class*="absolute inset-0"]');
      
      if (overlay) {
        // Make sure the overlay has our custom class for CSS targeting
        overlay.classList.add('custom-overlay');
        
        // Update to gray gradient if it's still purple
        if (overlay.classList.contains('bg-gradient-to-t') && 
            (overlay.classList.contains('from-purple-900/95') || 
             overlay.classList.contains('to-purple-800/90'))) {
          overlay.classList.remove('from-purple-900/95', 'to-purple-800/90');
          overlay.classList.add('from-gray-900/95', 'to-gray-800/90');
        }
        
        // Improve hover content styling if needed
        const hoverContent = overlay.querySelector('div');
        if (hoverContent) {
          // Add button-like styling to company name with safer DOM manipulation
          try {
            const companyName = hoverContent.querySelector('h3');
            if (companyName && !companyName.closest('.px-2.py-1.bg-gray-700\\/70')) {
              // Wrap company name in a styled container if not already
              const nameWrapper = document.createElement('div');
              nameWrapper.className = 'px-2 py-1 bg-gray-700/70 rounded mb-2 inline-block';
              
              // Safer DOM manipulation with reference validity check
              if (companyName.parentNode && nameWrapper) {
                const parentNode = companyName.parentNode;
                if (parentNode.contains(companyName)) {
                  parentNode.insertBefore(nameWrapper, companyName);
                  nameWrapper.appendChild(companyName);
                }
              }
            }
          } catch (e) {
            console.error('Error styling company name:', e);
          }
          
          // Add visit button if needed with safe DOM manipulation
          try {
            if (!hoverContent.querySelector('.mt-1.text-xs')) {
              const description = hoverContent.querySelector('p');
              if (description) {
                description.classList.add('mb-2');
                
                // Create visit button after description
                const visitButtonContainer = document.createElement('div');
                visitButtonContainer.className = 'mt-1 text-xs';
                
                const visitButton = document.createElement('span');
                visitButton.className = 'bg-gray-600/70 hover:bg-gray-500/80 px-3 py-1 rounded-full transition-colors';
                
                const companyName = card.querySelector('h3')?.textContent || 'Website';
                visitButton.textContent = `Visit ${companyName} →`;
                
                // Safe append with checks
                if (visitButtonContainer && visitButton) {
                  visitButtonContainer.appendChild(visitButton);
                  
                  // Only append to parent if it exists and is connected to the DOM
                  if (hoverContent && hoverContent.isConnected) {
                    hoverContent.appendChild(visitButtonContainer);
                  }
                }
              }
            }
          } catch (e) {
            console.error('Error adding visit button:', e);
          }
        }
      }
      
      // Ensure card has animation class but doesn't override existing ones
      if (!card.classList.contains('hover:animate-card-hover')) {
        card.classList.add('hover:animate-card-hover');
      }
      
      // Make sure the card responds properly to hover events
      card.addEventListener('mouseenter', function() {
        if (overlay) {
          // When hovering, make sure overlay is visible without changing other styles
          const currentTransform = overlay.style.transform;
          const currentOpacity = overlay.style.opacity;
          
          if (currentTransform.includes('translateY') || parseFloat(currentOpacity) === 0) {
            overlay.style.transform = 'translateY(0)';
            overlay.style.opacity = '1';
          }
        }
      });
      
      card.addEventListener('mouseleave', function() {
        if (overlay && !overlay.hasAttribute('data-keep-visible')) {
          // Reset overlay state on mouse leave if not forced visible
          overlay.style.transform = 'translateY(8px)';
          overlay.style.opacity = '0';
        }
      });
    });
    
    console.log('Hover effects and animations preserved for all cards');
  }

  // We already have a comprehensive resize handler above
  
  // Function to ensure stats section is using our new layout
  function enforceStatsLayout() {
    try {
      // Find any old-style stats sections
      const oldStatsGrids = document.querySelectorAll('div.grid-cols-2, div.grid-cols-4');
      
      if (oldStatsGrids.length > 0) {
        console.log(`Converting ${oldStatsGrids.length} old stats sections to new format`);
        
        // Convert each old grid to new format
        oldStatsGrids.forEach((oldGrid, index) => {
          // Add class based on position (first or second row)
          oldGrid.classList.add(index === 0 ? 'stats-row-1' : 'stats-row-2');
          
          // Force grid layout
          oldGrid.style.display = 'grid';
          oldGrid.style.gridTemplateColumns = 'repeat(4, 1fr)';
          oldGrid.style.gap = '0.5rem';
          oldGrid.style.width = '100%';
          oldGrid.style.maxWidth = '800px';
          
          // Add stats-item class to children
          const statItems = oldGrid.querySelectorAll('div');
          statItems.forEach(item => {
            item.classList.add('stats-item');
          });
        });
      }
      
      // Also target our new stats sections and ensure they're properly styled
      const statsRows = document.querySelectorAll('.stats-row-1, .stats-row-2');
      if (statsRows.length > 0) {
        console.log(`Found ${statsRows.length} stats rows to ensure proper layout`);
        
        statsRows.forEach(row => {
          // Ensure proper grid layout
          row.style.display = 'grid';
          row.style.gridTemplateColumns = 'repeat(4, 1fr)';
          row.style.gap = '0.5rem';
          
          // Add proper classes to children if needed
          const statItems = row.querySelectorAll('div');
          statItems.forEach(item => {
            if (!item.classList.contains('stats-item')) {
              item.classList.add('stats-item');
            }
          });
        });
      }
      
      console.log('Stats section layout enforcement complete');
    } catch (e) {
      console.error('Error enforcing stats layout:', e);
    }
  }

  // Final safety check after all operations complete
  setTimeout(() => {
    try {
      // Verify our dynamic styles
      const styleVerification = document.querySelector('style[data-portfolio-reset]');
      if (!styleVerification) {
        console.warn('Dynamic style may have been removed - reapplying');
        forceClearStyleCache();
      }
      
      // Ensure stats section is using our new layout
      enforceStatsLayout();
      
      // One last pass for badge formatting - with better positioning
      const badges = document.querySelectorAll('.portfolio-grid .absolute');
      badges.forEach(badge => {
        // Update position to match our new styling
        badge.classList.remove('top-2', 'right-2');
        badge.classList.add('top-1', 'right-1');
        
        // Reduce padding
        badge.style.padding = '0 0.3rem';
        badge.style.fontSize = '0.65rem';
        badge.style.lineHeight = '1.2';
        badge.style.borderRadius = '0.15rem';
        
        // Add specific badge classes
        if (badge.textContent?.includes('Markup')) {
          badge.classList.add('badge-markup');
          badge.style.backgroundColor = '#7e22ce';
        }
        if (badge.textContent?.includes('Acquired')) {
          badge.classList.add('badge-acquired');
          badge.style.backgroundColor = '#6b7280';
        }
      });
      
      // Log completion of script initialization with version info
      console.log(`Portfolio grid enhancement script v7.1.0 fully initialized (${VERSION})`);
    } catch (e) {
      console.error('Error during final checks:', e);
    }
  }, 2000);
})();