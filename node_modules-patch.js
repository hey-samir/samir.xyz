// Direct patching of Next.js modules
import * as fs from 'fs';
import * as path from 'path';

console.log("Patching Next.js node_modules for Bun compatibility...");

// Define our polyfill code to inject
const polyfillCode = `
// Polyfill for TextEncoderStream and TextDecoderStream
if (typeof globalThis.TextEncoderStream === 'undefined') {
  globalThis.TextEncoderStream = class TextEncoderStreamPolyfill {
    constructor() {
      this.encoder = new TextEncoder();
    }
    start() {}
    transform(chunk, controller) {
      if (controller && typeof controller.enqueue === 'function') {
        controller.enqueue(this.encoder.encode(chunk));
      }
    }
    flush() {}
  };
}

if (typeof globalThis.TextDecoderStream === 'undefined') {
  globalThis.TextDecoderStream = class TextDecoderStreamPolyfill {
    constructor(label) {
      this.decoder = new TextDecoder(label);
    }
    start() {}
    transform(chunk, controller) {
      if (controller && typeof controller.enqueue === 'function') {
        controller.enqueue(this.decoder.decode(chunk, { stream: true }));
      }
    }
    flush(controller) {
      if (controller && typeof controller.enqueue === 'function') {
        controller.enqueue(this.decoder.decode());
      }
    }
  };
}
`;

// Find and patch the problematic file in node_modules
const nextDistDir = './node_modules/next/dist';
const edgeRuntimePrimitives = path.join(nextDistDir, 'compiled/@edge-runtime/primitives/load.js');

try {
  if (fs.existsSync(edgeRuntimePrimitives)) {
    console.log(`Found Edge Runtime primitives file: ${edgeRuntimePrimitives}`);
    
    // Read the file content
    let content = fs.readFileSync(edgeRuntimePrimitives, 'utf8');
    
    // Only patch if not already patched
    if (!content.includes('TextEncoderStreamPolyfill')) {
      // Add our polyfill code at the beginning of the file
      content = polyfillCode + '\n' + content;
      
      // Write the patched file back
      fs.writeFileSync(edgeRuntimePrimitives, content, 'utf8');
      console.log(`Successfully patched: ${edgeRuntimePrimitives}`);
    } else {
      console.log(`File already patched: ${edgeRuntimePrimitives}`);
    }
  } else {
    console.log(`Edge Runtime primitives file not found: ${edgeRuntimePrimitives}`);
  }
} catch (error) {
  console.error(`Error patching Edge Runtime primitives: ${error.message}`);
}

console.log("Node modules patching completed");